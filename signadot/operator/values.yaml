# Add these labels to all objects deployed by this chart.
# commonLabels:
#   exampleCommonLabel: exampleCommonLabelValue

# Add these annotations to all objects deployed by this chart.
# commonAnnotations:
#   exampleCommonAnnotation: exampleCommonAnnotationValue

# Add these labels to all Pods deployed by this chart.
# podLabels:
#   examplePodLabel: examplePodLabelValue

# Add these annotations to all Pods deployed by this chart.
# podAnnotations:
#   examplePodLAnnotation: examplePodLAnnotationValue

# Add these labels to all Services deployed by this chart.
# serviceLabels:
#   exampleServiceLabel: exampleServiceLabelValue

# Add these annotations to all Services deployed by this chart.
# serviceAnnotations:
#   exampleServiceLAnnotation: exampleServiceLAnnotationValue

# Add these labels or annotations to all istio objects when they are managed by
# Signadot Note that VirtualServices are only managed by Signadot when they
# route to some sandbox. 
#
# istio:
#   additionalLabels:
#     exampleLabel: exampleLabelValue
#   additionalAnnotations:
#     exampleAnnotatonKey: exampleAnnotationValue


# By default, this chart will install the operator in
# cluster-wide mode, where it watches all namespaces.

# Uncomment the following to configure the operator to
# only watch specific namespaces.
# allowedNamespaces:
# - ns1
# - ns2

# Image customization parameters:
#
# operator:
#   image: my-private-registry/signadot/operator:latest
#   imagePullPolicy: Always
 
# agent:
#   image: my-private-registry/signadot/agent:latest
#   imagePullPolicy: Always

# routeServer:
#   image: my-private-registry/signadot/route-server:latest
#   imagePullPolicy: Always

# ioContextServer:
#   image: my-private-registry/signadot/io-context-server:latest
#   imagePullPolicy: Always

# kubeRBACProxy:
#   image: my-private-registry/gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
#   imagePullPolicy: Always

# routeInit:
#   image: my-private-registry/signadot/route-sidecar-init:latest
#   legacy:
#     image: my-private-registry/signadot/sd-init-networking:latest
#   imagePullPolicy: Always
#   imagePullSecret: secret-routeInit

# routeSidecar:
#   image: my-private-registry/signadot/route-sidecar:latest
#   legacy:
#     image: my-private-registry/signadot/route-sidecar-legacy:latest
#   imagePullPolicy: Always
#   imagePullSecret: secret-routeSidecar

# ioInit:
#   image: my-private-registry/signadot/io-init:latest
#   imagePullPolicy: Always
#   imagePullSecret: secret-ioInit

# ioSidecar:
#   image: my-private-registry/signadot/io-sidecar:latest
#   imagePullPolicy: Always
#   imagePullSecret: secret-ioSidecar

# execpodSidecar:  # for legacy resource plugins
#   image: my-private-registry/signadot/execpod-sidecar:latest
#   imagePullPolicy: Always
#   imagePullSecret: secret-execpodSidecar

# tunnel:
#   api:
#     replicas: 1
#     image: my-private-registry/signadot/tunnel-api:latest
#     imagePullPolicy: Always
#     resources:
#       requests:
#         cpu: "100m"
#         memory: "256Mi"
#       limits:
#         cpu: "100m"
#         memory: "512Mi"
#     strategy:
#       rollingUpdate:
#         maxSurge: 25%
#         maxUnavailable: 25%
#       type: RollingUpdate
#   proxy:
#     replicas: 1
#     image: my-private-registry/signadot/tunnel-proxy:latest
#     imagePullPolicy: Always
#     resources:
#       requests:
#         cpu: "200m"
#         memory: "512Mi"
#       limits:
#         cpu: "200m"
#         memory: "1Gi"
#     strategy:
#       rollingUpdate:
#         maxSurge: 25%
#         maxUnavailable: 25%
#       type: RollingUpdate
#   auditor:
#     image: my-private-registry/signadot/tunnel-auditor:latest
#     imagePullPolicy: Always
#     init:
#       image: my-private-registry/signadot/tunnel-auditor-init:latest
#       imagePullPolicy: Always
#     # luaRocks is an optional, space-separated list of Lua packages (called rocks)
#     # to install in the Envoy auditor Lua environment.
#     # These packages' modules can then be required from inboundRulesLuaScript and
#     # outputRulesLuaScript.
#     # See luarocks.org for available packages.
#     luaRocks: "date"
#     inboundRulesLuaScript: |
#       function envoy_on_request(request_handle)
#         -- sample code (read one custom header and print it)
#         local auditKey = request_handle:headers():get("inbound-audit-key")
#         if auditKey ~= nil and auditKey ~= '' then
#           request_handle:logInfo(auditKey)
#         end
#       end
#     outboundRulesLuaScript: |
#       function envoy_on_request(request_handle)
#         -- sample code (read one custom header and print it)
#         local auditKey = request_handle:headers():get("outbound-audit-key")
#         if auditKey ~= nil and auditKey ~= '' then
#           request_handle:logInfo(auditKey)
#         end
#       end
#   config:
#     cidrs: |
#       outboundIPs:
#       - name: foo
#         cidr: 10.80.0.0/12
#         exclude: true
#       version: 1
#     externalDNS:
#       server: http://10.20.10.2:8083
#       syncInterval: 60
#     disableSSH: false
#     disableXAP: false
