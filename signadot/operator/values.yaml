# Common settings
# -----------------------------------------------------------------------------

# Add these labels to all objects deployed by this chart.
# commonLabels:
#   exampleCommonLabel: exampleCommonLabelValue

# Add these annotations to all objects deployed by this chart.
# commonAnnotations:
#   exampleCommonAnnotation: exampleCommonAnnotationValue

# Add these labels to all Pods deployed by this chart.
# podLabels:
#   examplePodLabel: examplePodLabelValue

# Add these annotations to all Pods deployed by this chart.
# podAnnotations:
#   examplePodLAnnotation: examplePodLAnnotationValue

# Add these labels to all Services deployed by this chart.
# serviceLabels:
#   exampleServiceLabel: exampleServiceLabelValue

# Add these annotations to all Services deployed by this chart.
# serviceAnnotations:
#   exampleServiceLAnnotation: exampleServiceLAnnotationValue

# By default, this chart will install the operator in
# cluster-wide mode, where it watches all namespaces.

# Uncomment the following to configure the operator to
# only watch specific namespaces.
# allowedNamespaces:
# - ns1
# - ns2


# Istio settings
# -----------------------------------------------------------------------------

# istio:
#   # Enable the integration with Istio
#   enabled: true
#   # Enable sandbox routing by matching the VirtualService.host field (deprecated)
#   enableDeprecatedHostRouting: false
#   # Add these labels or annotations to all istio objects when they are managed by
#   # Signadot Note that virtual services are only managed by Signadot when they
#   # route to some sandbox.  For virtual services, these labels or annotations are
#   # only added if they were not present before becoming managed by signadot.
#   additionalLabels:
#     exampleLabel: exampleLabelValue
#   additionalAnnotations:
#     exampleAnnotatonKey: exampleAnnotationValue


# Linkerd settings
# -----------------------------------------------------------------------------

# linkerd:
#   # Enable the integration with Linkerd
#   enabled: true


# Component settings
# -----------------------------------------------------------------------------

operator:
  resources:
    limits:
      cpu: 100m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 512Mi
  # image: my-private-registry/signadot/operator:latest
  # imagePullPolicy: Always

agent:
  resources:
    limits:
      memory: 2Gi
    requests:
      memory: 128Mi
  # image: my-private-registry/signadot/agent:latest
  # imagePullPolicy: Always

routeServer:
  resources:
    limits:
      memory: 2Gi
    requests:
      memory: 128Mi
  # image: my-private-registry/signadot/route-server:latest
  # imagePullPolicy: Always

ioContextServer:
  resources:
    limits:
      memory: 1Gi
    requests:
      memory: 128Mi
  # image: my-private-registry/signadot/io-context-server:latest
  # imagePullPolicy: Always

# routeInit:
#   resources:
#     limits:
#       cpu: 100m
#       memory: 128Mi
#     requests:
#       cpu: 60m
#       memory: 64Mi
#   image: my-private-registry/signadot/route-sidecar-init:latest
#   legacy:
#     image: my-private-registry/signadot/sd-init-networking:latest
#   imagePullPolicy: Always
#   imagePullSecret: secret-routeInit

# routeSidecar:
#   resources:
#     limits:
#       cpu: 100m
#       memory: 128Mi
#     requests:
#       cpu: 60m
#       memory: 64Mi
#   image: my-private-registry/signadot/route-sidecar:latest
#   legacy:
#     image: my-private-registry/signadot/route-sidecar-legacy:latest
#   imagePullPolicy: Always
#   imagePullSecret: secret-routeSidecar

# ioInit:
#   resources:
#     limits:
#       cpu: 100m
#       memory: 128Mi
#     requests:
#       cpu: 60m
#       memory: 64Mi
#   image: my-private-registry/signadot/io-init:latest
#   imagePullPolicy: Always
#   imagePullSecret: secret-ioInit

# ioSidecar:
#   resources:
#     limits:
#       cpu: 200m
#       memory: 256Mi
#     requests:
#       cpu: 100m
#       memory: 128Mi
#   image: my-private-registry/signadot/io-sidecar:latest
#   imagePullPolicy: Always
#   imagePullSecret: secret-ioSidecar

# execpodSidecar:  # for legacy resource plugins
#   image: my-private-registry/signadot/execpod-sidecar:latest
#   imagePullPolicy: Always
#   imagePullSecret: secret-execpodSidecar

tunnel:
  api:
    resources:
      limits:
        memory: 1Gi
      requests:
        memory: 128Mi
    replicas: 1
    # image: my-private-registry/signadot/tunnel-api:latest
    # imagePullPolicy: Always
    # strategy:
    #   rollingUpdate:
    #     maxSurge: 25%
    #     maxUnavailable: 25%
    #   type: RollingUpdate
  proxy:
    resources:
      limits:
        memory: 2Gi
      requests:
        memory: 128Mi
    replicas: 1
  #   image: my-private-registry/signadot/tunnel-proxy:latest
  #   imagePullPolicy: Always
  #   strategy:
  #     rollingUpdate:
  #       maxSurge: 25%
  #       maxUnavailable: 25%
  #     type: RollingUpdate
  auditor:
    init:
      resources:
        limits:
          memory: 2Gi
        requests:
          memory: 128Mi
  #     image: my-private-registry/signadot/tunnel-auditor-init:latest
  #     imagePullPolicy: Always
    resources:
      limits:
        memory: 2Gi
      requests:
        memory: 128Mi
  #   image: my-private-registry/signadot/tunnel-auditor:latest
  #   imagePullPolicy: Always
  #   # luaRocks is an optional, space-separated list of Lua packages (called rocks)
  #   # to install in the Envoy auditor Lua environment.
  #   # These packages' modules can then be required from inboundRulesLuaScript and
  #   # outputRulesLuaScript.
  #   # See luarocks.org for available packages.
  #   luaRocks: "date"
  #   inboundRulesLuaScript: |
  #     function envoy_on_request(request_handle)
  #       -- sample code (read one custom header and print it)
  #       local auditKey = request_handle:headers():get("inbound-audit-key")
  #       if auditKey ~= nil and auditKey ~= '' then
  #         request_handle:logInfo(auditKey)
  #       end
  #     end
  #   outboundRulesLuaScript: |
  #     function envoy_on_request(request_handle)
  #       -- sample code (read one custom header and print it)
  #       local auditKey = request_handle:headers():get("outbound-audit-key")
  #       if auditKey ~= nil and auditKey ~= '' then
  #         request_handle:logInfo(auditKey)
  #       end
  #     end
  # config:
  #   cidrs: |
  #     outboundIPs:
  #     - name: foo
  #       cidr: 10.80.0.0/12
  #       exclude: true
  #     version: 1
  #   externalDNS:
  #     server: http://10.20.10.2:8083
  #     syncInterval: 60
  #   disableSSH: false
  #   disableXAP: false

# jobExecutorInit:
#   resources:
#     limits:
#       cpu: 100m
#       memory: 128Mi
#     requests:
#       cpu: 60m
#       memory: 64Mi
#   image: my-private-registry/signadot/job-executor-init:latest
#   imagePullPolicy: Always
#   imagePullSecret: secret-jobExecutorInit

# jobExecutorProxy:
#   resources:
#     limits:
#       cpu: 200m
#       memory: 256Mi
#     requests:
#       cpu: 100m
#       memory: 128Mi
#   image: my-private-registry/signadot/job-executor-proxy:latest
#   imagePullPolicy: Always
#   imagePullSecret: secret-jobExecutorProxy

# sandboxTrafficManager:
#   enabled: true
#   init:
#     resources:
#       limits:
#         cpu: 100m
#         memory: 128Mi
#       requests:
#         cpu: 60m
#         memory: 64Mi
#     image: my-private-registry/signadot/sandbox-traffic-manager-init:latest
#     imagePullPolicy: Always
#     imagePullSecret: secret-sandboxTrafficManagerInit
#   sidecar:
#     resources:
#       limits:
#         cpu: 200m
#         memory: 256Mi
#       requests:
#         cpu: 100m
#         memory: 128Mi
#     image: my-private-registry/signadot/sandbox-traffic-manager-sidecar:latest
#     imagePullPolicy: Always
#     imagePullSecret: secret-sandboxTrafficManagerSidecart


# Routing settings
# -----------------------------------------------------------------------------

# routing:
#   iptablesMode: nft
#   # Define a list of custom routing headers
#   customHeaders:
#     - header1
#     - header2


# Traffic capture settings
# -----------------------------------------------------------------------------

# trafficCapture:
#   enabled: true
#   # Request headers to be elided from traffic captures
#   requestHeadersElide:
#     - header1
#     - header2
#   # Response headers to be elided from traffic captures
#   responseHeadersElide:
#     - header1
#     - header2