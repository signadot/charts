# This file is generated. Do not edit.
apiVersion: v1
data:
  config.yaml: |
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: /tmp/envoy-admin.log
      address:
        socket_address:
          protocol: TCP
          address: 127.0.0.1
          port_value: 9901

    static_resources:
      listeners:

      # Inbound
      # -------------------------------------------------------------------------
      - name: inbound_listener
        address:
          socket_address:
            protocol: TCP
            address: 0.0.0.0
            port_value: 10000

        listener_filters:
        - name: tls_inspector
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector
        - name: http_inspector
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.http_inspector.v3.HttpInspector
        - name: original_dst
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst

        filter_chains:
        # TLS proxy
        - filter_chain_match:
            transport_protocol: tls
          filters:
          - name: envoy.tcp_proxy
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
              stat_prefix: tcp-tls
              access_log:
              - name: envoy.access_loggers.http_grpc
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.grpc.v3.TcpGrpcAccessLogConfig
                  common_config:
                    log_name: "inbound_tls"
                    transport_api_version: V3
                    grpc_service:
                      envoy_grpc:
                        cluster_name: grpc_als_cluster
              cluster: passthrough_proxy

        # HTTP/gRPC proxy
        - filter_chain_match:
            application_protocols:
              - "http/1.0"
              - "http/1.1"
              - "h2c"
              - "h2"
          filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              codec_type: AUTO
              preserve_external_request_id: true
              access_log:
              - name: envoy.access_loggers.file
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: /dev/stdout
                  log_format:
                    json_format:
                      start_time: "%START_TIME%"
                      request_id: "%REQ(X-REQUEST-ID)%"
                      request_method: "%REQ(:METHOD)%"
                      protocol: "%PROTOCOL%"
                      host: "%REQ(:AUTHORITY)% (%UPSTREAM_HOST%)"
                      path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                      user_agent: "%REQ(USER-AGENT)%"
                      duration: "%DURATION%"
                      bytes_sent: "%BYTES_SENT%"
                      bytes_received: "%BYTES_RECEIVED%"
                      origin: "%DOWNSTREAM_REMOTE_ADDRESS%"
                      response_code: "%RESPONSE_CODE%"
                      response_code_details: "%RESPONSE_CODE_DETAILS%"
              - name: envoy.access_loggers.http_grpc
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig
                  common_config:
                    log_name: "inbound_http"
                    transport_api_version: V3
                    grpc_service:
                      envoy_grpc:
                        cluster_name: grpc_als_cluster
                  additional_request_headers_to_log:
                  additional_response_headers_to_log:
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  default_source_code:
                    filename: /etc/lua/inbound-rules.lua
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: passthrough_proxy
                      timeout: 0s
                      idleTimeout: 3600s
                      maxStreamDuration:
                        maxStreamDuration: 0s

          # TCP proxy
        - filters:
          - name: envoy.tcp_proxy
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
              stat_prefix: tcp
              access_log:
              - name: envoy.access_loggers.http_grpc
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.grpc.v3.TcpGrpcAccessLogConfig
                  common_config:
                    log_name: "inbound_tcp"
                    transport_api_version: V3
                    grpc_service:
                      envoy_grpc:
                        cluster_name: grpc_als_cluster
              cluster: passthrough_proxy


      # Outbound
      # -------------------------------------------------------------------------
      - name: outbound_listener
        address:
          socket_address:
            protocol: TCP
            address: 0.0.0.0
            port_value: 10001

        listener_filters:
        - name: tls_inspector
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector
        - name: http_inspector
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.http_inspector.v3.HttpInspector
        - name: original_dst
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst

        filter_chains:
        # TLS proxy
        - filter_chain_match:
            transport_protocol: tls
          filters:
          - name: envoy.tcp_proxy
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
              stat_prefix: tcp-tls
              access_log:
              - name: envoy.access_loggers.http_grpc
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.grpc.v3.TcpGrpcAccessLogConfig
                  common_config:
                    log_name: "outbound_tls"
                    transport_api_version: V3
                    grpc_service:
                      envoy_grpc:
                        cluster_name: grpc_als_cluster
              cluster: passthrough_proxy

        # HTTP/gRPC forward proxy
        - filter_chain_match:
            application_protocols:
              - "http/1.0"
              - "http/1.1"
              - "h2c"
              - "h2"
          filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              codec_type: AUTO
              preserve_external_request_id: true
              access_log:
              - name: envoy.access_loggers.file
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: /dev/stdout
                  log_format:
                    json_format:
                      start_time: "%START_TIME%"
                      request_id: "%REQ(X-REQUEST-ID)%"
                      request_method: "%REQ(:METHOD)%"
                      protocol: "%PROTOCOL%"
                      host: "%REQ(:AUTHORITY)% (%UPSTREAM_HOST%)"
                      path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                      user_agent: "%REQ(USER-AGENT)%"
                      duration: "%DURATION%"
                      bytes_sent: "%BYTES_SENT%"
                      bytes_received: "%BYTES_RECEIVED%"
                      origin: "%DOWNSTREAM_REMOTE_ADDRESS%"
                      response_code: "%RESPONSE_CODE%"
                      response_code_details: "%RESPONSE_CODE_DETAILS%"
              - name: envoy.access_loggers.http_grpc
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig
                  common_config:
                    log_name: "outbound_http"
                    transport_api_version: V3
                    grpc_service:
                      envoy_grpc:
                        cluster_name: grpc_als_cluster
                  additional_request_headers_to_log:
                  additional_response_headers_to_log:
              http_filters:
              - name: envoy.filters.http.dynamic_forward_proxy
                typed_config:
                  '@type': type.googleapis.com/envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig
                  dns_cache_config:
                    name: dynamic_forward_proxy_cache_config
                    dns_lookup_family: V4_ONLY
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  default_source_code:
                    filename: /etc/lua/outbound-rules.lua
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

              # enable HTTP CONNECT and Websockets
              http2_protocol_options:
                allow_connect: true
              upgrade_configs:
              - upgrade_type: CONNECT
              - upgrade_type: websocket

              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  # forward http connect traffic
                  - match:
                      connect_matcher:  {}
                    route:
                      cluster: passthrough_proxy
                      timeout: "900s"
                      idle_timeout: "900s"
                      max_stream_duration:
                        max_stream_duration: "0s"
                        grpc_timeout_header_max: "0s"
                  # redirected http traffic
                  - match:
                      prefix: "/"
                    route:
                      cluster: dynamic_forward_proxy
                      timeout: 0s
                      idleTimeout: 3600s
                      maxStreamDuration:
                        maxStreamDuration: 0s

          # TCP filter
        - filters:
            - name: envoy.tcp_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: tcp
                access_log:
                - name: envoy.access_loggers.http_grpc
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.grpc.v3.TcpGrpcAccessLogConfig
                    common_config:
                      log_name: "outbound_tcp"
                      transport_api_version: V3
                      grpc_service:
                        envoy_grpc:
                          cluster_name: grpc_als_cluster
                cluster: passthrough_proxy

      # Clusters
      # -------------------------------------------------------------------------
      clusters:
      # Dynamic forward
      - name: dynamic_forward_proxy
        connect_timeout: 1s
        lb_policy: CLUSTER_PROVIDED
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            upstream_http_protocol_options:
              auto_sni: true
              auto_san_validation: true
            use_downstream_protocol_config:
              http_protocol_options: {}
              http2_protocol_options: {}
        cluster_type:
          name: envoy.clusters.dynamic_forward_proxy
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig
            dns_cache_config:
              name: dynamic_forward_proxy_cache_config
              dns_lookup_family: V4_ONLY

      # Passthrough
      - name: passthrough_proxy
        type: ORIGINAL_DST
        connect_timeout: 10s
        lb_policy: CLUSTER_PROVIDED
        dns_lookup_family: V4_ONLY
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            use_downstream_protocol_config:
              http_protocol_options: {}
              http2_protocol_options: {}

      # gRPC Access Log Sink
      - name: grpc_als_cluster
        connect_timeout: 5s
        type: STATIC
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        load_assignment:
          cluster_name: grpc_als_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 5000
  inbound-rules.lua: {{ with .Values }}{{ with .tunnel }}{{ with .auditor }}{{ with .inboundRulesLuaScript }}{{ . | quote}}{{- else -}}"function envoy_on_request(request_handle)\n  -- sample blocking rule\n  local blockRequestHeader = request_handle:headers():get(\"sd-block-request\")\n  if blockRequestHeader ~= nil and blockRequestHeader == 'true' then\n    request_handle:respond({[\":status\"] = \"403\"}, \"signadot: forbidden\")\n  end\nend\n"{{- end }}{{- else -}}"function envoy_on_request(request_handle)\n  -- sample blocking rule\n  local blockRequestHeader = request_handle:headers():get(\"sd-block-request\")\n  if blockRequestHeader ~= nil and blockRequestHeader == 'true' then\n    request_handle:respond({[\":status\"] = \"403\"}, \"signadot: forbidden\")\n  end\nend\n"{{- end }}{{- else -}}"function envoy_on_request(request_handle)\n  -- sample blocking rule\n  local blockRequestHeader = request_handle:headers():get(\"sd-block-request\")\n  if blockRequestHeader ~= nil and blockRequestHeader == 'true' then\n    request_handle:respond({[\":status\"] = \"403\"}, \"signadot: forbidden\")\n  end\nend\n"{{- end }}{{- else -}}"function envoy_on_request(request_handle)\n  -- sample blocking rule\n  local blockRequestHeader = request_handle:headers():get(\"sd-block-request\")\n  if blockRequestHeader ~= nil and blockRequestHeader == 'true' then\n    request_handle:respond({[\":status\"] = \"403\"}, \"signadot: forbidden\")\n  end\nend\n"{{- end }}
  outbound-rules.lua: {{ with .Values }}{{ with .tunnel }}{{ with .auditor }}{{ with .outboundRulesLuaScript }}{{ . | quote}}{{- else -}}"function envoy_on_request(request_handle)\n  -- sample blocking rule\n  local blockRequestHeader = request_handle:headers():get(\"sd-block-request\")\n  if blockRequestHeader ~= nil and blockRequestHeader == 'true' then\n    request_handle:respond({[\":status\"] = \"403\"}, \"signadot: forbidden\")\n  end\nend\n"{{- end }}{{- else -}}"function envoy_on_request(request_handle)\n  -- sample blocking rule\n  local blockRequestHeader = request_handle:headers():get(\"sd-block-request\")\n  if blockRequestHeader ~= nil and blockRequestHeader == 'true' then\n    request_handle:respond({[\":status\"] = \"403\"}, \"signadot: forbidden\")\n  end\nend\n"{{- end }}{{- else -}}"function envoy_on_request(request_handle)\n  -- sample blocking rule\n  local blockRequestHeader = request_handle:headers():get(\"sd-block-request\")\n  if blockRequestHeader ~= nil and blockRequestHeader == 'true' then\n    request_handle:respond({[\":status\"] = \"403\"}, \"signadot: forbidden\")\n  end\nend\n"{{- end }}{{- else -}}"function envoy_on_request(request_handle)\n  -- sample blocking rule\n  local blockRequestHeader = request_handle:headers():get(\"sd-block-request\")\n  if blockRequestHeader ~= nil and blockRequestHeader == 'true' then\n    request_handle:respond({[\":status\"] = \"403\"}, \"signadot: forbidden\")\n  end\nend\n"{{- end }}
kind: ConfigMap
metadata:
  annotations:
    {{- range $key, $val := .Values.commonAnnotations }}
    {{ $key | quote }}: {{ $val | quote }}
    {{- end }}
    {{- range $key, $val := .Values.configMapAnnotations }}
    {{ $key | quote }}: {{ $val | quote }}
    {{- end }}
  labels:
    sd-component: auditor
    {{- range $key, $val := .Values.commonLabels }}
    {{ $key | quote }}: {{ $val | quote }}
    {{- end }}
    {{- range $key, $val := .Values.configMapLabels }}
    {{ $key | quote }}: {{ $val | quote }}
    {{- end }}
  name: tunnel-auditor-config
  namespace: signadot
