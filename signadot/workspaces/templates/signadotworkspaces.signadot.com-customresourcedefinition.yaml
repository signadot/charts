# This file is generated. Do not edit.
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
    {{- range $key, $val := .Values.commonAnnotations }}
    {{ $key | quote }}: {{ $val | quote }}
    {{- end }}
  labels:
    {{- range $key, $val := .Values.commonLabels }}
    {{ $key | quote }}: {{ $val | quote }}
    {{- end }}
  name: signadotworkspaces.signadot.com
spec:
  group: signadot.com
  names:
    kind: SignadotWorkspace
    listKind: SignadotWorkspaceList
    plural: signadotworkspaces
    shortNames:
    - sdw
    singular: signadotworkspace
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: SignadotWorkspace can be used to create a workspace in which
          customized versions of one or more workloads (e.g. running work-in-progress
          code) run alongside the real workloads and serve only those requests that
          are explicitly tagged to run in this workspace.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SignadotWorkspaceSpec defines the desired state of SignadotWorkspace
            properties:
              clusterName:
                description: ClusterName should be the name of the cluster this workspace
                  lives in.
                type: string
              customization:
                description: Customization describes the ways in which live workloads
                  running in the cluster should be customized for this workspace.
                properties:
                  images:
                    description: "Images to replace when cloning workloads (e.g. Deployments)
                      for this workspace. \n Any live Deployment (one that isn't part
                      of a workspace) that uses an image from this list will be cloned
                      and the clone will use the new image name and/or tag specified."
                    items:
                      description: ImageReplacement describes a rule for replacing
                        images in cloned containers.
                      properties:
                        name:
                          description: "Name specifies which image name in live workloads
                            will be replaced. \n Example: us.gcr.io/my-staging-registry/widget"
                          type: string
                        namespace:
                          description: Namespace optionally specifies which namespace
                            will be searched.
                          type: string
                        newName:
                          description: "NewName provides a replacement for the image
                            name (the part before the tag). If this is left unset,
                            the image name will not be changed. \n Example: us.gcr.io/my-dev-registry/username/widget"
                          type: string
                        newTag:
                          description: "NewTag provides a replacement tag for the
                            image. If this is left unset, the image tag will not be
                            changed. \n Example: v1.0.0-snapshot-abc123"
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                  overlays:
                    description: "Overlays define custom objects to clone into the
                      workspace, creating a workspace state that consists of these
                      custom objects layered on top of the live, baseline state. \n
                      This can be used, for example, to create cloned Deployments
                      based on manifest changes that have been committed on a git
                      branch. \n If an overlay defines an object that already exists
                      in the live, baseline state, the overlay's version of the object
                      will be used as the starting point for cloning and patching
                      instead of the baseline object. \n If an overlay defines an
                      object that doesn't exist in the baseline state, that object
                      will be cloned into the workspace and patched as if it had been
                      found in the baseline state. \n If more than one overlay defines
                      the same object, the precedence is determined by the order in
                      which overlays are listed in this field. Each overlay takes
                      precedence over any overlays that came before it in the list
                      order."
                    items:
                      description: "Overlay defines a set of objects to clone into
                        the workspace. \n In the future, there may be multiple alternative
                        subfields to define overlays in different ways. Each overlay
                        entry should only set one of these subfields."
                      properties:
                        git:
                          description: Git specifies how to extract objects from Kubernetes
                            YAML manifests in a git repository.
                          properties:
                            baseBranch:
                              description: "BaseBranch is the branch to compare against,
                                usually \"main\" or \"master\". \n Objects will only
                                be added to the overlay if they have been changed
                                in some commit along the path from the target commit
                                back to the point at which its branch diverged from
                                the base branch. Changes made on the base branch after
                                that point will not trigger objects to be cloned into
                                the workspace since those changes are presumed to
                                be orthogonal to the PR. \n Note that manifest extraction
                                will always use the signadot.yaml config from the
                                target commit regardless of which commit is being
                                scanned. This ensures an apples-to-apples comparison
                                and allows config changes to apply retroactively to
                                old commits."
                              type: string
                            branch:
                              description: "Branch is the git branch from which to
                                pull objects. \n For now, this is only used to add
                                human-readable annotations for debuggability. The
                                commit hash is the real source of truth for what will
                                be checked out."
                              type: string
                            commit:
                              description: "Commit is the target git commit hash to
                                checkout and scan for changed objects. \n This is
                                the real source of truth for what to checkout, instead
                                of just checking out the head of the specified branch
                                at a point in time. Specifying a commit hash makes
                                the overlay deterministic and also serves as a way
                                to tell the operator when a new commit has been pushed
                                to the branch. \n Objects found in manifests at this
                                commit will only be cloned if they've changed since
                                the point at which this commit's branch diverged from
                                the specified base branch."
                              type: string
                            repo:
                              description: "Repo is the git repository URL. Currently
                                only SSH is supported. \n This repository must have
                                a signadot.yaml file at the repository root, describing
                                where to find Kubernetes manifests and how to expand
                                any templates if necessary. \n Example: github.com:signadot/hotrod.git"
                              type: string
                            sshKeySecret:
                              description: "SSHKeySecret specifies a value within
                                a given Kubernetes Secret object to use as the SSH
                                private key when cloning the git repository. \n Note
                                that this Secret must be in the 'signadot' namespace
                                since it's used by a background Job that the operator
                                spawns there. \n This private key should have been
                                granted read access to the repository, such as by
                                adding the corresponding public key as a GitHub Deploy
                                Key."
                              properties:
                                key:
                                  description: The key of the secret to select from.  Must
                                    be a valid secret key.
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                    TODO: Add other useful fields. apiVersion, kind,
                                    uid?'
                                  type: string
                                optional:
                                  description: Specify whether the Secret or its key
                                    must be defined
                                  type: boolean
                              required:
                              - key
                              type: object
                          required:
                          - baseBranch
                          - branch
                          - commit
                          - repo
                          - sshKeySecret
                          type: object
                        namespace:
                          description: Namespace can optionally be set to filter extracted
                            objects by namespace.
                          type: string
                      type: object
                    type: array
                  patches:
                    description: "Patches to apply when cloning workloads (e.g. Deployments)
                      for this workspace. \n Each patch describes which object it
                      applies to. If a matching object is found, a clone of that object
                      will be created for this workspace and the patch will be applied
                      to the clone. \n If multiple patches and/or image replacement
                      rules match a given object, only one clone of that object will
                      be created, and then all matching patches and image replacements
                      will be applied on top of one another to the clone. Patches
                      will be applied last, in the order listed here, so they take
                      precedence over image replacements. \n Each patch can be defined
                      in any one of the formats supported by `kubectl patch`. See:
                      https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
                      \n Only one of the following fields should be set for each patch
                      in the list: \n   strategic - Define the patch in Kubernetes
                      strategic merge patch format.   merge - Define the patch in
                      JSON Merge Patch format (RFC 7386).   json - Define the patch
                      in JSON Patch format (RFC 6902)."
                    items:
                      description: Patch describes a set of changes to apply to a
                        given object.
                      properties:
                        json:
                          description: JSON specifies the patch in JSON Patch format
                            (RFC 6902).
                          items:
                            description: "RawExtension is a wrapper around runtime.RawExtension.
                              \n It exists so we can add the PreserveUnknownFields
                              directive on the items in a []RawExtension list, rather
                              than to the list itself. Adding PreserveUnknownFields
                              to the list itself works in the latest patch releases
                              of k8s v1.18+, but the fix was never backported to v1.17
                              or older: \n https://github.com/kubernetes/kubernetes/pull/94888"
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                          type: array
                        merge:
                          description: Merge specifies the patch in JSON Merge Patch
                            format (RFC 7396).
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        strategic:
                          description: "Strategic specifies the patch in Kubernetes
                            strategic merge patch format. \n See: https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/"
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        target:
                          description: Target specifies what object this patch applies
                            to.
                          properties:
                            apiVersion:
                              description: APIVersion specifies the API Version (e.g.
                                "apps/v1") of the object to patch.
                              type: string
                            kind:
                              description: Kind specifies the Kind (e.g. "Deployment")
                                of the object to patch.
                              type: string
                            name:
                              description: Name specifies the name of the object to
                                patch.
                              type: string
                            namespace:
                              description: Namespace optionally specifies which namespace
                                will be searched.
                              type: string
                          required:
                          - apiVersion
                          - kind
                          - name
                          type: object
                      required:
                      - target
                      type: object
                    type: array
                  preservedLabels:
                    description: "PreservedLabels is a list of RE2 regular expressions
                      to check against label keys on the original baseline Pod template.
                      The expression can match any substring within the key, so use
                      anchors if you want to require a full match. \n Normally, all
                      baseline labels are stripped from the cloned Pod template to
                      ensure it can't match any existing Services. Labels from the
                      baseline Pod that match any of these regular expressions will
                      be preserved on the cloned Pod instead. \n If preserving these
                      labels would cause the cloned Pods to match a baseline Service,
                      the workspace controller will pause and report an error to avoid
                      interference."
                    items:
                      type: string
                    type: array
                type: object
              id:
                description: "ID should be a unique identifier for the workspace.
                  \n It can be up to 32 characters, consisting of lowercase alphanumeric
                  characters or '-', but it must both start and end with an alphanumeric
                  character."
                maxLength: 32
                minLength: 1
                pattern: ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$
                type: string
              name:
                description: "Name should be a unique value in the organization that
                  easily allows any user to identify what the workspace is being used
                  for when reading it. \n It can be up to 30 characters, consisting
                  of alphanumeric characters or '-', but it must both start and end
                  with an alphanumeric character."
                maxLength: 30
                pattern: ^$|^[a-zA-Z]([a-zA-Z0-9-]*[a-zA-Z0-9])?$
                type: string
            required:
            - id
            type: object
          status:
            description: SignadotWorkspaceStatus defines the observed state of SignadotWorkspace
            properties:
              conditions:
                description: 'Conditions is a list of conditions that matches the
                  conventions expected by kubectl, allowing our CRDs to work with:
                  kubectl wait --for=condition=...'
                items:
                  description: "StatusCondition is a condition struct that matches
                    the conventions expected by kubectl, allowing our CRDs to work
                    with: kubectl wait --for=condition=... \n StatusConditions must
                    follow the following discipline in reconciliation: The operator
                    MUST always populate all the condition types in a SignadotWorkspaceStatus
                    struct, irrespective of whether the condition is known or not
                    (see corev1.ConditionUnknown) so that access via a k8s client
                    can determine whether the capability is supported in the operator."
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              customizedDeployments:
                description: CustomizedDeployments is the number of Deployments that
                  have been cloned and customized.
                format: int32
                type: integer
              observedGeneration:
                format: int64
                type: integer
              overlays:
                description: Overlays is the total number of overlays defined for
                  this workspace.
                format: int32
                type: integer
              readyDeployments:
                description: ReadyDeployments is the number of cloned Deployments
                  that have been customized and are Complete.
                format: int32
                type: integer
              readyOverlays:
                description: ReadyOverlays is the number of overlays whose objects
                  have been generated or extract successfully.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
